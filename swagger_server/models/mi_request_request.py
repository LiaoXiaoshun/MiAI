# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MiRequestRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: int=None, request_id: str=None, timestamp: int=None, locale: str=None, intent: object=None, no_response: bool=None, even_type: str=None, event_property: object=None):  # noqa: E501
        """MiRequestRequest - a model defined in Swagger

        :param type: The type of this MiRequestRequest.  # noqa: E501
        :type type: int
        :param request_id: The request_id of this MiRequestRequest.  # noqa: E501
        :type request_id: str
        :param timestamp: The timestamp of this MiRequestRequest.  # noqa: E501
        :type timestamp: int
        :param locale: The locale of this MiRequestRequest.  # noqa: E501
        :type locale: str
        :param intent: The intent of this MiRequestRequest.  # noqa: E501
        :type intent: object
        :param no_response: The no_response of this MiRequestRequest.  # noqa: E501
        :type no_response: bool
        :param even_type: The even_type of this MiRequestRequest.  # noqa: E501
        :type even_type: str
        :param event_property: The event_property of this MiRequestRequest.  # noqa: E501
        :type event_property: object
        """
        self.swagger_types = {
            'type': int,
            'request_id': str,
            'timestamp': int,
            'locale': str,
            'intent': object,
            'no_response': bool,
            'even_type': str,
            'event_property': object
        }

        self.attribute_map = {
            'type': 'type',
            'request_id': 'request_id',
            'timestamp': 'timestamp',
            'locale': 'locale',
            'intent': 'intent',
            'no_response': 'no_response',
            'even_type': 'even_type',
            'event_property': 'event_property'
        }

        self._type = type
        self._request_id = request_id
        self._timestamp = timestamp
        self._locale = locale
        self._intent = intent
        self._no_response = no_response
        self._even_type = even_type
        self._event_property = event_property

    @classmethod
    def from_dict(cls, dikt) -> 'MiRequestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MiRequest_request of this MiRequestRequest.  # noqa: E501
        :rtype: MiRequestRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> int:
        """Gets the type of this MiRequestRequest.


        :return: The type of this MiRequestRequest.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """Sets the type of this MiRequestRequest.


        :param type: The type of this MiRequestRequest.
        :type type: int
        """

        self._type = type

    @property
    def request_id(self) -> str:
        """Gets the request_id of this MiRequestRequest.


        :return: The request_id of this MiRequestRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """Sets the request_id of this MiRequestRequest.


        :param request_id: The request_id of this MiRequestRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this MiRequestRequest.


        :return: The timestamp of this MiRequestRequest.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this MiRequestRequest.


        :param timestamp: The timestamp of this MiRequestRequest.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def locale(self) -> str:
        """Gets the locale of this MiRequestRequest.


        :return: The locale of this MiRequestRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale: str):
        """Sets the locale of this MiRequestRequest.


        :param locale: The locale of this MiRequestRequest.
        :type locale: str
        """

        self._locale = locale

    @property
    def intent(self) -> object:
        """Gets the intent of this MiRequestRequest.


        :return: The intent of this MiRequestRequest.
        :rtype: object
        """
        return self._intent

    @intent.setter
    def intent(self, intent: object):
        """Sets the intent of this MiRequestRequest.


        :param intent: The intent of this MiRequestRequest.
        :type intent: object
        """

        self._intent = intent

    @property
    def no_response(self) -> bool:
        """Gets the no_response of this MiRequestRequest.


        :return: The no_response of this MiRequestRequest.
        :rtype: bool
        """
        return self._no_response

    @no_response.setter
    def no_response(self, no_response: bool):
        """Sets the no_response of this MiRequestRequest.


        :param no_response: The no_response of this MiRequestRequest.
        :type no_response: bool
        """

        self._no_response = no_response

    @property
    def even_type(self) -> str:
        """Gets the even_type of this MiRequestRequest.


        :return: The even_type of this MiRequestRequest.
        :rtype: str
        """
        return self._even_type

    @even_type.setter
    def even_type(self, even_type: str):
        """Sets the even_type of this MiRequestRequest.


        :param even_type: The even_type of this MiRequestRequest.
        :type even_type: str
        """

        self._even_type = even_type

    @property
    def event_property(self) -> object:
        """Gets the event_property of this MiRequestRequest.


        :return: The event_property of this MiRequestRequest.
        :rtype: object
        """
        return self._event_property

    @event_property.setter
    def event_property(self, event_property: object):
        """Sets the event_property of this MiRequestRequest.


        :param event_property: The event_property of this MiRequestRequest.
        :type event_property: object
        """

        self._event_property = event_property
