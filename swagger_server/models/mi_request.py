# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mi_request_context import MiRequestContext  # noqa: F401,E501
from swagger_server.models.mi_request_request import MiRequestRequest  # noqa: F401,E501
from swagger_server.models.mi_request_session import MiRequestSession  # noqa: F401,E501
from swagger_server import util


class MiRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, version: str=None, query: str=None, session: MiRequestSession=None, context: MiRequestContext=None, request: MiRequestRequest=None):  # noqa: E501
        """MiRequest - a model defined in Swagger

        :param version: The version of this MiRequest.  # noqa: E501
        :type version: str
        :param query: The query of this MiRequest.  # noqa: E501
        :type query: str
        :param session: The session of this MiRequest.  # noqa: E501
        :type session: MiRequestSession
        :param context: The context of this MiRequest.  # noqa: E501
        :type context: MiRequestContext
        :param request: The request of this MiRequest.  # noqa: E501
        :type request: MiRequestRequest
        """
        self.swagger_types = {
            'version': str,
            'query': str,
            'session': MiRequestSession,
            'context': MiRequestContext,
            'request': MiRequestRequest
        }

        self.attribute_map = {
            'version': 'version',
            'query': 'query',
            'session': 'session',
            'context': 'context',
            'request': 'request'
        }

        self._version = version
        self._query = query
        self._session = session
        self._context = context
        self._request = request

    @classmethod
    def from_dict(cls, dikt) -> 'MiRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MiRequest of this MiRequest.  # noqa: E501
        :rtype: MiRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this MiRequest.


        :return: The version of this MiRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this MiRequest.


        :param version: The version of this MiRequest.
        :type version: str
        """

        self._version = version

    @property
    def query(self) -> str:
        """Gets the query of this MiRequest.


        :return: The query of this MiRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query: str):
        """Sets the query of this MiRequest.


        :param query: The query of this MiRequest.
        :type query: str
        """

        self._query = query

    @property
    def session(self) -> MiRequestSession:
        """Gets the session of this MiRequest.


        :return: The session of this MiRequest.
        :rtype: MiRequestSession
        """
        return self._session

    @session.setter
    def session(self, session: MiRequestSession):
        """Sets the session of this MiRequest.


        :param session: The session of this MiRequest.
        :type session: MiRequestSession
        """

        self._session = session

    @property
    def context(self) -> MiRequestContext:
        """Gets the context of this MiRequest.


        :return: The context of this MiRequest.
        :rtype: MiRequestContext
        """
        return self._context

    @context.setter
    def context(self, context: MiRequestContext):
        """Sets the context of this MiRequest.


        :param context: The context of this MiRequest.
        :type context: MiRequestContext
        """

        self._context = context

    @property
    def request(self) -> MiRequestRequest:
        """Gets the request of this MiRequest.


        :return: The request of this MiRequest.
        :rtype: MiRequestRequest
        """
        return self._request

    @request.setter
    def request(self, request: MiRequestRequest):
        """Sets the request of this MiRequest.


        :param request: The request of this MiRequest.
        :type request: MiRequestRequest
        """

        self._request = request
