# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mi_response_response_directives import MiResponseResponseDirectives  # noqa: F401,E501
from swagger_server.models.mi_response_response_to_display import MiResponseResponseToDisplay  # noqa: F401,E501
from swagger_server.models.mi_response_response_to_speak import MiResponseResponseToSpeak  # noqa: F401,E501
from swagger_server import util


class MiResponseResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, to_speak: MiResponseResponseToSpeak=None, to_display: MiResponseResponseToDisplay=None, directives: MiResponseResponseDirectives=None, open_mic: bool=None, not_understand: bool=None):  # noqa: E501
        """MiResponseResponse - a model defined in Swagger

        :param to_speak: The to_speak of this MiResponseResponse.  # noqa: E501
        :type to_speak: MiResponseResponseToSpeak
        :param to_display: The to_display of this MiResponseResponse.  # noqa: E501
        :type to_display: MiResponseResponseToDisplay
        :param directives: The directives of this MiResponseResponse.  # noqa: E501
        :type directives: MiResponseResponseDirectives
        :param open_mic: The open_mic of this MiResponseResponse.  # noqa: E501
        :type open_mic: bool
        :param not_understand: The not_understand of this MiResponseResponse.  # noqa: E501
        :type not_understand: bool
        """
        self.swagger_types = {
            'to_speak': MiResponseResponseToSpeak,
            'to_display': MiResponseResponseToDisplay,
            'directives': MiResponseResponseDirectives,
            'open_mic': bool,
            'not_understand': bool
        }

        self.attribute_map = {
            'to_speak': 'to_speak',
            'to_display': 'to_display',
            'directives': 'directives',
            'open_mic': 'open_mic',
            'not_understand': 'not_understand'
        }

        self._to_speak = to_speak
        self._to_display = to_display
        self._directives = directives
        self._open_mic = open_mic
        self._not_understand = not_understand

    @classmethod
    def from_dict(cls, dikt) -> 'MiResponseResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MiResponse_response of this MiResponseResponse.  # noqa: E501
        :rtype: MiResponseResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def to_speak(self) -> MiResponseResponseToSpeak:
        """Gets the to_speak of this MiResponseResponse.


        :return: The to_speak of this MiResponseResponse.
        :rtype: MiResponseResponseToSpeak
        """
        return self._to_speak

    @to_speak.setter
    def to_speak(self, to_speak: MiResponseResponseToSpeak):
        """Sets the to_speak of this MiResponseResponse.


        :param to_speak: The to_speak of this MiResponseResponse.
        :type to_speak: MiResponseResponseToSpeak
        """

        self._to_speak = to_speak

    @property
    def to_display(self) -> MiResponseResponseToDisplay:
        """Gets the to_display of this MiResponseResponse.


        :return: The to_display of this MiResponseResponse.
        :rtype: MiResponseResponseToDisplay
        """
        return self._to_display

    @to_display.setter
    def to_display(self, to_display: MiResponseResponseToDisplay):
        """Sets the to_display of this MiResponseResponse.


        :param to_display: The to_display of this MiResponseResponse.
        :type to_display: MiResponseResponseToDisplay
        """

        self._to_display = to_display

    @property
    def directives(self) -> MiResponseResponseDirectives:
        """Gets the directives of this MiResponseResponse.


        :return: The directives of this MiResponseResponse.
        :rtype: MiResponseResponseDirectives
        """
        return self._directives

    @directives.setter
    def directives(self, directives: MiResponseResponseDirectives):
        """Sets the directives of this MiResponseResponse.


        :param directives: The directives of this MiResponseResponse.
        :type directives: MiResponseResponseDirectives
        """

        self._directives = directives

    @property
    def open_mic(self) -> bool:
        """Gets the open_mic of this MiResponseResponse.


        :return: The open_mic of this MiResponseResponse.
        :rtype: bool
        """
        return self._open_mic

    @open_mic.setter
    def open_mic(self, open_mic: bool):
        """Sets the open_mic of this MiResponseResponse.


        :param open_mic: The open_mic of this MiResponseResponse.
        :type open_mic: bool
        """

        self._open_mic = open_mic

    @property
    def not_understand(self) -> bool:
        """Gets the not_understand of this MiResponseResponse.


        :return: The not_understand of this MiResponseResponse.
        :rtype: bool
        """
        return self._not_understand

    @not_understand.setter
    def not_understand(self, not_understand: bool):
        """Sets the not_understand of this MiResponseResponse.


        :param not_understand: The not_understand of this MiResponseResponse.
        :type not_understand: bool
        """

        self._not_understand = not_understand
