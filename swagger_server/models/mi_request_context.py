# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MiRequestContext(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, passport: object=None, device_id: str=None):  # noqa: E501
        """MiRequestContext - a model defined in Swagger

        :param passport: The passport of this MiRequestContext.  # noqa: E501
        :type passport: object
        :param device_id: The device_id of this MiRequestContext.  # noqa: E501
        :type device_id: str
        """
        self.swagger_types = {
            'passport': object,
            'device_id': str
        }

        self.attribute_map = {
            'passport': 'passport',
            'device_id': 'device_id'
        }

        self._passport = passport
        self._device_id = device_id

    @classmethod
    def from_dict(cls, dikt) -> 'MiRequestContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MiRequest_context of this MiRequestContext.  # noqa: E501
        :rtype: MiRequestContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def passport(self) -> object:
        """Gets the passport of this MiRequestContext.


        :return: The passport of this MiRequestContext.
        :rtype: object
        """
        return self._passport

    @passport.setter
    def passport(self, passport: object):
        """Sets the passport of this MiRequestContext.


        :param passport: The passport of this MiRequestContext.
        :type passport: object
        """

        self._passport = passport

    @property
    def device_id(self) -> str:
        """Gets the device_id of this MiRequestContext.


        :return: The device_id of this MiRequestContext.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this MiRequestContext.


        :param device_id: The device_id of this MiRequestContext.
        :type device_id: str
        """

        self._device_id = device_id
